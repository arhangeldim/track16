<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
          "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
          "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!--
    Checkstyle configuration that checks the Google coding conventions from Google Java Style
    that can be found at https://google.github.io/styleguide/javaguide.html.

    Checkstyle is very configurable. Be sure to read the documentation at
    http://checkstyle.sf.net (or in your downloaded distribution).

    To completely disable a check, just comment it out or delete it from the file.

    Authors: Max Vetrenko, Ruslan Diachenko, Roman Ivanov.
 -->

<module name = "Checker">
    <property name="charset" val="UTF-8"/>

    <property name="severity" val="error"/>

    <property name="fileExtensions" val="java, properties, xml"/>
    <!-- Checks for whitespace                               -->
    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <module name="FileTabCharacter">
            <property name="eachLine" val="true"/>
        </module>

    <module name="TreeWalker">
        <module name="OuterTypeFilename"/>
        <module name="IllegalTokenText">
            <property name="tokens" val="STRING_LITERAL, CHAR_LITERAL"/>
            <property name="format" val="\\u00(08|09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
            <property name="message" val="Avoid using corresponding octal or Unicode escape."/>
        </module>
        <module name="AvoidEscapedUnicodeCharacters">
            <property name="allowEscapesForControlCharacters" val="true"/>
            <property name="allowByTailComment" val="true"/>
            <property name="allowNonPrintableEscapes" val="true"/>
        </module>
        <module name="LineLength">
            <property name="max" val="120"/>
            <property name="ignorePattern" val="^package.*|^import.*|a href|href|http://|https://|ftp://|throw"/>
        </module>
        <module name="NoLineWrap"/>
        <module name="EmptyBlock">
            <property name="option" val="TEXT"/>
            <property name="tokens" val="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH"/>
        </module>
        <module name="NeedBraces"/>
        <module name="LeftCurly">
            <property name="maxLineLength" val="100"/>
        </module>
        <module name="RightCurly"/>
        <module name="RightCurly">
            <property name="option" val="alone"/>
            <property name="tokens" val="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO, STATIC_INIT, INSTANCE_INIT"/>
        </module>
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" val="true"/>
            <property name="allowEmptyMethods" val="true"/>
            <property name="allowEmptyTypes" val="true"/>
            <property name="allowEmptyLoops" val="true"/>
            <message key="ws.notFollowed"
             val="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)"/>
             <message key="ws.notPreceded"
             val="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>
        </module>
        <module name="OneStatementPerLine"/>
        <module name="MultipleVariableDeclarations"/>
        <module name="ArrayTypeStyle"/>
        <module name="MissingSwitchDefault"/>
        <module name="FallThrough"/>
        <module name="UpperEll"/>
        <module name="ModifierOrder"/>
        <module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" val="true"/>
        </module>
        <module name="SeparatorWrap">
            <property name="tokens" val="DOT"/>
            <property name="option" val="nl"/>
        </module>
        <module name="SeparatorWrap">
            <property name="tokens" val="COMMA"/>
            <property name="option" val="EOL"/>
        </module>
        <module name="PackageName">
            <property name="format" val="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
            <message key="name.invalidPattern"
             val="Package name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="TypeName">
            <message key="name.invalidPattern"
             val="Type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MemberName">
            <property name="format" val="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
             val="Member name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="ParameterName">
            <property name="format" val="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
             val="Parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="LocalVariableName">
            <property name="tokens" val="VARIABLE_DEF"/>
            <property name="format" val="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <property name="allowOneCharVarInForLoop" val="true"/>
            <message key="name.invalidPattern"
             val="Local variable name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="ClassTypeParameterName">
            <property name="format" val="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
             val="Class type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MethodTypeParameterName">
            <property name="format" val="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
             val="Method type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="InterfaceTypeParameterName">
            <property name="format" val="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
             val="Interface type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="NoFinalizer"/>
        <module name="GenericWhitespace">
            <message key="ws.followed"
             val="GenericWhitespace ''{0}'' is followed by whitespace."/>
             <message key="ws.preceded"
             val="GenericWhitespace ''{0}'' is preceded with whitespace."/>
             <message key="ws.illegalFollow"
             val="GenericWhitespace ''{0}'' should followed by whitespace."/>
             <message key="ws.notPreceded"
             val="GenericWhitespace ''{0}'' is not preceded with whitespace."/>
        </module>
        <module name="Indentation">
            <property name="basicOffset" val="4"/>
            <property name="braceAdjustment" val="0"/>
            <property name="caseIndent" val="4"/>
            <property name="throwsIndent" val="8"/>
            <property name="lineWrappingIndentation" val="8"/>
            <property name="arrayInitIndent" val="4"/>
        </module>
        <module name="AbbreviationAsWordInName">
            <property name="ignoreFinal" val="false"/>
            <property name="allowedAbbreviationLength" val="1"/>
        </module>
        <module name="OverloadMethodsDeclarationOrder"/>
        <module name="VariableDeclarationUsageDistance"/>
        <module name="CustomImportOrder">
            <!--<property name="specialsRegExp" val="com.google"/>-->
            <!--<property name="sortImportsInGroupAlphabetically" val="true"/>-->
            <!--<property name="customImportOrderRules" val="STATIC###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE###STANDARD_JAVA_PACKAGE"/>-->
        </module>
        <module name="MethodParamPad"/>
        <module name="OperatorWrap">
            <property name="option" val="eol"/>
            <property name="tokens" val="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR "/>
        </module>
        <module name="AnnotationLocation">
            <property name="tokens" val="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF"/>
        </module>
        <module name="AnnotationLocation">
            <property name="tokens" val="VARIABLE_DEF"/>
            <property name="allowSamelineMultipleAnnotations" val="true"/>
        </module>
        <module name="NonEmptyAtclauseDescription"/>
        <module name="AtclauseOrder">
            <property name="tagOrder" val="@param, @return, @throws, @deprecated"/>
            <property name="target" val="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
        </module>
        <module name="MethodName">
            <property name="format" val="^[a-z][a-z0-9][a-zA-Z0-9_]*$"/>
            <message key="name.invalidPattern"
             val="Method name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" val="expected"/>
        </module>
    </module>
</module>
